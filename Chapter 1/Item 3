#Difference between bytes and str
##bytes
a = b'h\x65llo'
print(list(a))
print(a)

##str
a = 'a\u0300 propos'
print(list(a))
print(a)

##Decode (transform bytes into strings)
def to_str(bytes_or_str):
    if isinstance(bytes_or_str, bytes):
        value = bytes_or_str.decode('utf-8')
    else:
        value = bytes_or_str
    return value #Instance of str

print(repr(to_str(b'foo'))) 
print(repr(to_str('bar')))

##Encode (transform strings into bytes)
def to_bytes(str_or_bytes):
    if isinstance(str_or_bytes, str):
        value = str_or_bytes.encode('utf-8')
    else:
        value = str_or_bytes
    return value #Instance of bytes

print(repr(to_bytes(b'foo')))
print(repr(to_bytes('bar')))

##using operators with strings and bytes
print(b'one' + b'two')
print('one' + 'two')

print(b'one' + 'two')

assert b'red' > b'blue'
assert 'red' > 'blue'

assert b'red' > 'blue'

print(b'foo' == 'foo')

print(b'red %s' % b'blue')
print('red %s' % 'blue')

print("i went %s" % "for a walk")

print(b'blue %s' % 'red')
print('red %s' % b'blue')

##writting and reading binary and string data
with open('data.bin', 'w') as f:
    f.write(b'\xf1\xf2\xf3\xf4\xf5')

"""
It is good practice to use the with keyword when dealing with file objects. 
The advantage is that the file is properly closed after its suite finishes.
""" 
   
with open('data.bin', 'wb') as f:
    f.write(b'\xf1\xf2\xf3\xf4\xf5')
    
with open('data.bin', 'r') as f:
    data = f.read()
    
with open('data.bin', 'rb') as f:
    data = f.read()

assert data == b'\xf1\xf2\xf3\xf4\xf5'

with open('data.bin', 'r', encoding='cp1252') as f:
    data = f.read()

assert data == 'ñòóôõ'
