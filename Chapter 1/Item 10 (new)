##Preventing repetition (walrus operator)
a := b #a walrus b


#normal assignment statement
fresh_fruit = {
        'apple': 10,
        'banana': 8,
        'lemon': 5,
}

##Lemonade
def make_lemonade(count):
    print(f'Making {count} lemons into lemonade')

def out_of_stock():
    print('Out of stock!')

count = fresh_fruit.get('lemon', 0)
if count:
    make_lemonade(count)
else:
    out_of_stock()

##Cider
def cider(count1):
    print(f'Making cider with {count1} apples')

count1 = fresh_fruit.get('apple', 0)
if count1 >= 4:
    cider(count1)
else:
    out_of_stock()

##Banana smoothie
def slice_bananas(count2):
    print(f'Slicing {count2} bananas')
    return count2 * 4

def OutofBananas(Exception):
    pass

def make_smoothies(count2):
    print(f'Making a smoothies with {count2} banana slices')

pieces = 0
count2 = fresh_fruit.get('banana', 0)
if count2 >= 2:
    pieces = slice_bananas(count2)

try:
    smoothies = make_smoothies(pieces)
except OutofBananas:
    out_of_stock

if count2 >= 2:
    pieces = slice_bananas(count2)
else:
    pieces = 0

try:
    smoothies = make_smoothies(pieces)
except OutofBananas:
    out_of_stock


#using warlus operator
##Lemonade
if count := fresh_fruit.get('lemon', 0):
    make_lemonade(count)
else:
    out_of_stock()

##Cider
if (count1 := fresh_fruit.get('apple', 0)) >= 4:
    cider(count1)
else:
    out_of_stock

##Banana smoothie
if (count2 := fresh_fruit.get('banana', 0)) >= 2:
    pieces = slice_bananas(count2)
else:
    pieces = 0

try:
    smoothies = make_smoothies(pieces)
except OutofBananas:
    out_of_stock


#Deep nesting of multiple if, elif, else statement
count3 = fresh_fruit.get('banana', 0)

if count3 >=2:
    pieces = slice_bananas(count3)
    to_enjoy = make_smoothies(pieces)
else:
    count3 = fresh_fruit.get('apple', 0)
    if count3 >= 4:
        to_enjoy = make_cider(count3)
    else:
        count3 = fresh_fruit.get('lemon', 0)
        if count3:
            to_enjoy = make_lemonade(count3)
        else:
            to_enjoy = 'Nothing'

if (count3 := fresh_fruit('banana', 0)) >= 2:
    pieces = slice_bananas(count3)
    to_enjoy = make_smoothies(pieces)
elif (count3 := fresh_fruit('apple', 0)) >= 4:
    to_enjoy = make_cider(count3)
elif count3 := fresh_fruit('lemonade', 0):
    to_enjoy = make_lemonade(count3)
else:
    to_enjoy = 'Nothing'

#Testing
count4 = fresh_fruit.get('banana', 0)
count5 = fresh_fruit.get('apple', 0)
count6 = fresh_fruit.get('lemon', 0)

if count4 >= 2:
    pieces = slice_bananas(count4)
    to_enjoy = make_smoothies(pieces)
elif count5 >= 4:
    to_enjoy = make_cider(count5)
elif count6:
    to_enjoy = make_lemonade(count4)
else:
    to_enjoy = 'Nothing'


#In While loops
FRUIT_TO_PICK = [
    {'apple': 1, 'banana': 3},
    {'lemon': 2, 'lime': 5},
    {'orange': 3, 'melon': 2},
]

def pick_fruit():
    if FRUIT_TO_PICK:
        return FRUIT_TO_PICK.pop(0)
    else:
        return []

def make_juice(fruit, count):
    return [(fruit, count)]

bottles = []
fresh_fruit = pick_fruit()
while fresh_fruit:
    for fruit, count in fresh_fruit.items():
        batch = make_juice(fruit, count)
        bottles.extend(batch)
    fresh_fruit = pick_fruit()

print(bottles)

#simplified
bottles = []
while True:                     # Loop
    fresh_fruit = pick_fruit()
    if not fresh_fruit:         # And a half
        break
    for fruit, count in fresh_fruit.items():
        batch = make_juice(fruit, count)
        bottles.extend(batch)
print(bottles)

#using walrus
bottles = []
while fresh_fruit := pick_fruit():
    for fruit, count in fresh_fruit.items():
        batch = make_juice(fruit, count)
        bottles.extend(batch)
print(bottles)
