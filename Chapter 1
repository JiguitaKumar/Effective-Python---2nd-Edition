# -*- coding: utf-8 -*-
"""
Created on Wed Apr 22 16:53:06 2020

@author: jiguitakumar
"""

#Chapter 1

##The Zen of Python
import this

## Python version
import sys
print(sys.version_info)
print(sys.version)

##Difference between bytes and str
###bytes
a = b'h\x65llo'
print(list(a))
print(a)

###str
a = 'a\u0300 propos'
print(list(a))
print(a)

def to_str(bytes_or_str):
    if isinstance(bytes_or_str, bytes):
        value = bytes_or_str.decode('utf-8')
    else:
        value = bytes_or_str
    return value #Instance of str

print(repr(to_str(b'foo'))) 
print(repr(to_str('bar')))


def to_bytes(str_or_bytes):
    if isinstance(str_or_bytes, str):
        value = str_or_bytes.encode('utf-8')
    else:
        value = str_or_bytes
    return value #Instance of bytes

print(repr(to_bytes(b'foo')))
print(repr(to_bytes('bar')))

print(b'one' + b'two')
print('one' + 'two')

print(b'one' + 'two')

assert b'red' > b'blue'
assert 'red' > 'blue'

assert b'red' > 'blue'

print(b'foo' == 'foo')

print(b'red %s' % b'blue')
print('red %s' % 'blue')

print("i went %s" % "for a walk")

print(b'blue %s' % 'red')
print('red %s' % b'blue')

with open('data.bin', 'w') as f:
    f.write(b'\xf1\xf2\xf3\xf4\xf5')

"""
It is good practice to use the with keyword when dealing with file objects. 
The advantage is that the file is properly closed after its suite finishes.
""" 
   
with open('data.bin', 'wb') as f:
    f.write(b'\xf1\xf2\xf3\xf4\xf5')
    
with open('data.bin', 'r') as f:
    data = f.read()
    
with open('data.bin', 'rb') as f:
    data = f.read()

assert data == b'\xf1\xf2\xf3\xf4\xf5'

with open('data.bin', 'r', encoding='cp1252') as f:
    data = f.read()

assert data == 'ñòóôõ'


##Placeholders - Formatting Strings (using the % operator)

a = 0b10111011
b = 0xc5f
print('Binary is %d, hex is %d' % (a,b))

key = 'my_var'
value = 1.234
formatted = '%-10s = %.2f' % (key, value)
print(formatted)

reorder = '%-10s = %.2f' % (value, key)
print(reorder)

reorder_again = '%.2f = %-10s' % (key, value)
print(reorder_again)

pantry = [
        ('avocado', 1.25),
        ('bananas', 2.5),
        ('cherries', 15)
]
for i, (item, count) in enumerate(pantry):
    print('#%d: %-10s = %.2f' % (i, item, count))

for i, (item, count) in enumerate(pantry):
    print('#%d: %-10s = %d' % (
          i + 1,
          item.title(), #returns the same string with the first character capitalized
          round(count)))

template = '%s loves food. Watch %s cook!'
name = 'Max'
formatted = template % (name, name)
print(formatted)

name2 = 'brad'
formatted2 = template % (name2.title(), name2.title())
print(formatted2)

###placeholders - with dictionary

new_way = '%(key)-10s = %(value).2f' % {
        'key': key, 'value': value}

reordered = '%(key)-10s = %(value).2f' % {
        'value': value, 'key': key}

assert new_way == reordered

name = 'Ted'
template = '%(name)s loves food. Watch %(name)s cook!'
after = template % {'name': name}
print(after)

for i, (item, count) in enumerate(pantry):
    print('#%(loop)d: %(item)-10s = %(count)d' % {
          'loop': i + 1,
          'item': item.title(),
          'count':round(count),
})
    
soup = 'lentil'
formatted = 'Today\'s soup is %(soup)s.' % {'soup': soup}
print(formatted)

menu = {
        'soup': 'lentil',
        'oyster': 'Kumamoto',
        'special': 'schnitzel',
}
template = ('Today\'s soup is %(soup)s, '
            'buy one get two %(oyster)s oysters, '
            'and our special entreé is %(special)s.')
formatted = template % menu
print(formatted)

##Built-in function (format)
a = 1234.5678
formatted= format(a, ',.2f')
print(formatted)

b = 'my string'
formatted = format(b, '^20s')
print('*', formatted, '*')

##Using {} as a placeholder
key = 'my_var'
value = 1.234
formatted = '{} = {}'.format(key, value)
print(formatted)

formatted2 = '{:<10} = {:.2f}'.format(key, value)
print(formatted2)

print('%.2f%%' % 12.5)
print('{} replaces {{}}'.format(1.23))

formatted = '{1} = {0}'.format(key, value)
print(formatted)

name = 'George'
formatted = '{0} loves food. Watch {0} cook!'.format(name)
print(formatted)

for i, (item, count) in enumerate(pantry):
    print('#{}: {:<10s} = {}'.format(
        i + 1,
        item.title(),
        round(count)))

formatted = 'the first letter is {menu[oyster][0]!r}'.format(menu=menu)
print(formatted)

new_template = (
        'Today\'s soup is {soup}, '
        'buy one get two {oyster} oysters, '
        'and our special entreé is {special}.')

new_formatted = new_template.format(
        soup='lentil',
        oyster= 'Kumamoto',
        special= 'schnitzel',
)

print(new_formatted)

test = (
        'Today\'s soup is {soup}, '
        'buy one get two {oyster} oysters, '
        'and our special entreé is {special}.'). format(
            soup='lentil',
            oyster= 'Kumamoto',
            special= 'schnitzel',
)

print(test)

##interpolated format strings (F-strings)
key = 'my_var'
value = 1.234
format1 = f'{key} = {value}'
print(format1)

format2 = f'{key!r:<10} = {value:.2f}'
print(format2)

format3 = f'{key:<10} = {value:.2f}'
print(format3)

soup = 'lentil'
oyster = 'Kumamoto'
special = 'schnitzel'

format4 = (f'Today\'s soup is {soup}, '
        f'buy one get two {oyster} oysters, '
        f'and our special entreé is {special}.')

print(format4)

for i, (item, count) in enumerate(pantry):
    print(f'#{i+1}: {item.title():<10} = {round(count)}')
          
places = 3
number = 1.23456
print(f'My number is {number:.{places}f}')

##Helper function
from urllib.parse import parse_qs

my_values = parse_qs('red=5&blue=0&green=',
                     keep_blank_values=True)
print(repr(my_values))

print('Red:    ', my_values.get('red'))
print('Green:  ', my_values.get('green'))
print('Opacity:', my_values.get('opacity'))

red = my_values.get('red', [''])[0] or 0
blue = my_values.get('blue', [''])[0] or 0
green = my_values.get('green', [''])[0] or 0
opacity = my_values.get('opacity', [''])[0] or 0

print(f'Red:     {red!r}')
print(f'Blue:    {blue!r}')
print(f'Green:   {green!r}')
print(f'Opacity: {opacity!r}')

red_int = int(my_values.get('red', [''])[0] or 0)
print(red_int)

red_str = my_values.get('red', [''])
red1 = int(red_str[0]) if red_str[0] else 0
print(red1)

green_str = my_values.get('green', [''])
if green_str[0]:
    print(int(green_str[0]))
else:
    print(0)

def get_first_int(values, key, default=0):
    found = values.get(key, [''])
    if found[0]:
        return int(found[0])
    return default

get_first_int(my_values, 'green')
red2 = get_first_int(my_values, 'red')

##Multiple assignment
snack_calories = {
        'chips': 140,
        'popcorn': 80,
        'nuts': 190,
}
items = tuple(snack_calories.items())
print(items)
print(snack_calories)

help(tuple)

item = ('Peanut butter', 'Jelly')
first = item[0]
first
second = item[1]
second
print(first, 'and', second)

items[1]

pair = ('Chocolate', 'Caramel')
pair[1] = 'Honey'

third, fourth = pair
print(third, 'and', fourth)

def bubble_sort(a):
    for _ in range(len(a)):
        for i in range(1, len(a)):
            if a[i] < a[i-1]:
                temp = a[i]
                a[i] = a[i-1]
                a[i-1] = temp

names = ['pretzels', 'carrots', 'arugula', 'bacon']
bubble_sort(names)
names

for x in names:
    print(len(x))

for i in range(len(names)):
    print(len(names[i]))

def bubbles_sort(a):
    for _ in range(len(a)):
        for i in range(1, len(a)):
            if a[i] < a[i-1]:
                a[i-1], a[i] = a[i], a[i-1] #swap

names1 = ['pretzels', 'carrots', 'arugula', 'bacon']
bubbles_sort(names1)
names1

snacks = [('bacon', 350), ('donut', 240), ('muffin', 190)]
for i in range(len(snacks)):
    item = snacks[i]
    name = item[0]
    calories = item[1]
    print(f'#{i+1}: {name} has {calories} calories')

for rank, (name, calories) in enumerate(snacks, 1):
	print(f'#{rank}: {name} has {calories} calories')
