##Item 13 - Catch-all unpacking vs slicing
###Limitations of basic unpacking
car_ages = [0, 9, 4, 8, 7, 20, 19, 1, 6, 15]
car_ages_descending = sorted(car_ages, reverse = True)
oldest, second_oldest = car_ages_descending

oldest = car_ages_descending[0]
second_oldest = car_ages_descending[1]
others = car_ages_descending[2:]
print(oldest, second_oldest, others)

###starred expression (Catch-all unpacking)
oldest, second_oldest, *others = car_ages_descending
print(oldest, second_oldest, others)

oldest, *others, youngest = car_ages_descending
print(oldest, others, youngest)

*others, second_youngest, youngest = car_ages_descending
print(others, second_youngest, youngest)

*others = car_ages_descending #Error, must have at least one required

first, *middle, *second_middle, end = car_ages_descending
#can't have more than 1 starred item in a single unpacking

###using multiple starred expressions
car_inventory = {
    'Downtown': ('Silver Shadow', 'Pinto', 'DMC'),
    'Airport': ('Skyline', 'Viper', 'Gremlin', 'Nova'),
}

car_inventory.get('Downtown')

((loc1, (best1, *rest1)),
 (loc2, (best2, *rest2))) = car_inventory.items()
print(f'Best at {loc1} is {best1}, {len(rest1)} others')
print(f'Best at {loc2} is {best2}, {len(rest2)} others')

short_list = [1, 2]
first, second, *rest = short_list
print(first, second, rest)

###unpacking arbitrary iterators
it = iter(range(1, 3))
first, second = it
print(f'{first} and {second}')

def generate_csv():
    yield ('Date', 'Make', 'Model', 'Year', 'Price')
    for i in range(100):
        yield ('2019-03-25', 'Honda', 'Fit', '2010', '$3400')
        yield ('2019-03-26', 'Ford', 'F150', '2008', '$2400')

all_csv_rows = list(generate_csv())
header = all_csv_rows[0]
rows = all_csv_rows[1:]
print('CSV Header:', header)
print('Row count:', len(rows))

it = generate_csv()
header1, *rows1 = it
print('CSV Header:', header1)
print('Row count:', len(rows1))
