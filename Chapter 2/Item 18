##Item 18 - Construct Key-dependent default values
###using dict
pictures = {}
path = 'profile_1234.png'

handle = pictures.get(path)
if handle is None:
    try:
        handle = open(path, 'a+b') #open binary file and append
    except OSError:
        print(f'Failed to open path {path}')
        raise
else:
    picture[path] = handle

handle.seek(0)
image_data = handle.read()

#using set setdefault
try:
    handle = pictures.setdefault(path, open(path, 'a+b'))
except OSError:
    print(f'Failed to open path {path}')
    raise
else:
    handle.seek(0)
    image_data = handle.read()

#using defaultdict
from collections import defaultdict

def open_picture(profile_path):
    try:
        return open(profile_path, 'a+b')
    except OSErros:
        print(f'Failed to open path {profile_path}')
        raise

pictures = defaultdict(open_picture)
handle = pictures[path]
handle.seek(0)
image_data = handle.read()

#the __missing__ method
class Pictures(dict):
    def __missing__(self, key):
        value = open_picture(key)
        self[key] = value
        return value

pictures = Pictures()
handle = pictures[path]
handle.seek(0)
image_data = handle.read()
